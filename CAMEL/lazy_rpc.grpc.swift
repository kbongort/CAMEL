//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: lazy_rpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO


/// Usage: instantiate RPC_LightStateServiceClient, then call methods of this protocol to make API calls.
internal protocol RPC_LightStateServiceClientProtocol: GRPCClient {
  func lightStateStream(
    _ request: RPC_LightStateStreamRequest,
    callOptions: CallOptions?,
    handler: @escaping (RPC_LightState) -> Void
  ) -> ServerStreamingCall<RPC_LightStateStreamRequest, RPC_LightState>

}

extension RPC_LightStateServiceClientProtocol {

  /// Server streaming call to LightStateStream
  ///
  /// - Parameters:
  ///   - request: Request to send to LightStateStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func lightStateStream(
    _ request: RPC_LightStateStreamRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (RPC_LightState) -> Void
  ) -> ServerStreamingCall<RPC_LightStateStreamRequest, RPC_LightState> {
    return self.makeServerStreamingCall(
      path: "/RPC.LightStateService/LightStateStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

internal final class RPC_LightStateServiceClient: RPC_LightStateServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the RPC.LightStateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol RPC_LightStateServiceProvider: CallHandlerProvider {
  func lightStateStream(request: RPC_LightStateStreamRequest, context: StreamingResponseCallContext<RPC_LightState>) -> EventLoopFuture<GRPCStatus>
}

extension RPC_LightStateServiceProvider {
  internal var serviceName: Substring { return "RPC.LightStateService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "LightStateStream":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.lightStateStream(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

